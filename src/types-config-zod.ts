// Generated by ts-to-zod
import { z } from "zod";

export const seriesConfigGroupBySchema = z.object({
  func: z.union([
    z.literal("raw"),
    z.literal("avg"),
    z.literal("max"),
    z.literal("min"),
    z.literal("first"),
    z.literal("last"),
    z.literal("sum"),
    z.literal("median"),
    z.literal("delta"),
    z.literal("diff"),
  ]),
  duration: z.string(),
  fill: z
    .union([z.literal("null"), z.literal("last"), z.literal("zero")])
    .optional(),
});

export const seriesConfigStatisticsSchema = z.object({
  type: z.union([
    z.literal("mean"),
    z.literal("min"),
    z.literal("max"),
    z.literal("sum"),
    z.literal("state"),
  ]),
  period: z.union([
    z.literal("5minute"),
    z.literal("hour"),
    z.literal("day"),
    z.literal("week"),
    z.literal("month"),
  ]),
  align: z
    .union([z.literal("start"), z.literal("middle"), z.literal("end")])
    .optional(),
});

export const filterEntrySchema = z.object({
  entity_id: z.string().optional(),
  label: z.string().optional(),
});

export const layoutConfigSchema = z.object({
  margin: z
    .object({
      top: z.number().optional(),
      right: z.number().optional(),
      bottom: z.number().optional(),
      left: z.number().optional(),
    })
    .optional(),
});

export const filterSchema = z.object({
  include: z.array(filterEntrySchema).optional(),
  exclude: z.array(filterEntrySchema).optional(),
});

export const seriesConfigSchema = z.object({
  entity: z.string().optional(),
  filter: filterSchema.optional(),
  meta: z.record(z.any()).optional(),
  fetch_history: z
    .object({
      span: z.string(),
    })
    .optional(),
  transform: z.string().optional(),
  attribute: z.string().optional(),
  cache_history: z.boolean().optional(),
  group_by: seriesConfigGroupBySchema.optional(),
  statistics: seriesConfigStatisticsSchema.optional(),
});

export const cardConfigSchema = z.object({
  title: z.string(),
  height: z.string(),
  series: z.array(seriesConfigSchema),
  d3_code: z.string(),
  use_compression: z.boolean().optional(),
});
